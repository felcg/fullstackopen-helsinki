{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Notification.js","components/ContactList.js","services/persons.js","App.js","index.js"],"names":["Filter","searchTerm","handleSearch","name","value","onChange","PersonForm","addPerson","newPerson","handlePersonChange","onSubmit","number","type","Notification","message","style","color","fontStyle","fontSize","background","ContactList","personsToShow","removePerson","map","person","key","id","onClick","window","confirm","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","persons","setPersons","setNewPerson","setSearchTerm","showAll","setShowAll","notificationMessage","setNotificationMessage","errorMessage","setErrorMessage","useEffect","personService","initialPersons","filter","toLowerCase","includes","event","target","preventDefault","personObject","toUpdate","length","updatedPerson","returnedPerson","setTimeout","concat","removedPerson","find","updatedPersons","p","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c999a63c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Filter = ({ searchTerm, handleSearch }) => {\r\n  return (\r\n    <div>\r\n      <h2>Search the book</h2>\r\n      <input name=\"search\" value={searchTerm} onChange={handleSearch}></input>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst PersonForm = ({ addPerson, newPerson, handlePersonChange }) => {\r\n  return (\r\n    <div>\r\n      <h2>Add a new person to the book.</h2>\r\n      <form onSubmit={addPerson}>\r\n        <div>\r\n          name:{\" \"}\r\n          <input\r\n            name=\"name\"\r\n            value={newPerson.name}\r\n            onChange={handlePersonChange}\r\n          />\r\n          number:{\" \"}\r\n          <input\r\n            name=\"number\"\r\n            value={newPerson.number}\r\n            onChange={handlePersonChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PersonForm;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message, type }) => {\r\n  const notificationStyle = {\r\n    color: \"green\",\r\n    fontStyle: \"italic\",\r\n    fontSize: 20,\r\n    background: \"white\",\r\n  };\r\n\r\n  const errorStyle = {\r\n    color: \"red\",\r\n    fontStyle: \"italic\",\r\n    fontSize: 20,\r\n    background: \"black\",\r\n  };\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  if (type === \"error\") {\r\n    return <div style={errorStyle}>{message}</div>;\r\n  }\r\n\r\n  return <div style={notificationStyle}>{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\n\r\nconst ContactList = ({ personsToShow, removePerson }) => {\r\n  const confirmRemove = (id, name) => {\r\n    if (window.confirm(`Delete ${name}?`)) {\r\n      removePerson(id);\r\n    }\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Contact List</h2>\r\n      {personsToShow.map((person) => (\r\n        <div key={person.id}>\r\n          <p>Name: {person.name}</p>\r\n          <p>Number: {person.number}</p>\r\n          <button onClick={() => confirmRemove(person.id, person.name)}>\r\n            Remove\r\n          </button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request;\r\n};\r\n\r\nexport default { getAll, create, update, remove };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Filter from \"./components/Filter\";\r\nimport PersonForm from \"./components/PersonForm\";\r\nimport Notification from \"./components/Notification\";\r\nimport ContactList from \"./components/ContactList\";\r\nimport personService from \"./services/persons\";\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([]);\r\n  const [newPerson, setNewPerson] = useState({ name: \"\", number: \"\" });\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [notificationMessage, setNotificationMessage] = useState(null);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n\r\n  //Usa o personService para pegar a lista de pessoas\r\n  useEffect(() => {\r\n    personService.getAll().then((initialPersons) => setPersons(initialPersons));\r\n  }, []);\r\n\r\n  //Decide quais pessoas vão aparecer na lista baseados no termo de busca do usuário\r\n  const personsToShow = showAll\r\n    ? persons\r\n    : persons.filter((person) =>\r\n        person.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n\r\n  //Lida com a mudança dos inputs nos campos name e number\r\n  //quando o usuário escreve alguma coisa em um dos dois.\r\n  //usa o spread para quebrar o newPerson e event.target.name\r\n  //para saber qual campo está sendo modificado a partir do\r\n  //name do input.\r\n  const handlePersonChange = (event) => {\r\n    const value = event.target.value;\r\n    setNewPerson({ ...newPerson, [event.target.name]: value });\r\n  };\r\n\r\n  //Lida com quando o usuário busca algum nome na lista\r\n  //mudando o setShowAll para false, para só mostrar o\r\n  //nome que o usuário está buscando\r\n  const handleSearch = (event) => {\r\n    setSearchTerm(event.target.value);\r\n    setShowAll(false);\r\n  };\r\n\r\n  //Adiciona uma pessoa nova na lista\r\n  const addPerson = (event) => {\r\n    event.preventDefault();\r\n    const personObject = {\r\n      name: newPerson.name,\r\n      number: newPerson.number,\r\n    };\r\n\r\n    //Cria um array usando filter contendo o nome que existe na lista\r\n    //caso seja o mesmo que o usuário esta digitando (checa se usuario\r\n    //buscado já existe)\r\n    const toUpdate = persons.filter((person) => {\r\n      return person.name === newPerson.name;\r\n    });\r\n\r\n    //se nome já existe na lista, pergunta se usuário quer atualizar numero\r\n    if (toUpdate.length === 1) {\r\n      const confirm = window.confirm(\r\n        `${newPerson.name} already in phonebook, do you want to update the number?`\r\n      );\r\n      //se usuário quiser atualizar, pega o id e numero digitados\r\n      //usando o array criado em toUpdate e também o state newPerson\r\n      if (confirm) {\r\n        const id = toUpdate[0].id;\r\n        const updatedPerson = { ...toUpdate[0], number: newPerson.number };\r\n\r\n        //usa o personService para fazer a atualização passando o id e o objeto\r\n        //da nova pessoa. Em seguida atualiza o state persons, fazendo um map\r\n        //por ele, retornando os nomes da lista que nao foram modificados\r\n        //e retornando a versao modificada do que foi\r\n        personService.update(id, updatedPerson).then((returnedPerson) => {\r\n          setPersons(\r\n            persons.map((person) =>\r\n              person.id !== id ? person : returnedPerson\r\n            )\r\n          );\r\n          //Modifica a mensagem de notificação e faz ela sumir depois de 5 sec\r\n          setNotificationMessage(`${updatedPerson.name}'s number was updated`);\r\n          setTimeout(() => {\r\n            setNotificationMessage(null);\r\n          }, 5000);\r\n        });\r\n      }\r\n\r\n      //caso nao seja um usuário novo, adiciona o objeto novo com o state persons\r\n      //e limpa o state newPerson para que fique em branco e possa ser usado novamente\r\n    } else {\r\n      personService.create(personObject).then((returnedPerson) => {\r\n        setPersons(persons.concat(personObject));\r\n        setNewPerson({ name: \"\", number: \"\" });\r\n        //Modifica a mensagem de notificação e faz ela sumir depois de 5 sec\r\n        setNotificationMessage(\r\n          `${personObject.name} was added to the phonebook`\r\n        );\r\n        setTimeout(() => {\r\n          setNotificationMessage(null);\r\n        }, 5000);\r\n      });\r\n    }\r\n  };\r\n\r\n  //Deleta uma pessoa da lista usando o personService, atualizando o state\r\n  //para sumir com o nome removido. Usando filter procurando pelo id da pessoa\r\n  //na lista de pessoas\r\n  const removePerson = (id) => {\r\n    const removedPerson = persons.find((person) => person.id === id);\r\n    personService\r\n      .remove(id)\r\n      .then(() => {\r\n        const updatedPersons = persons.filter((p) => p.id !== id);\r\n        setPersons(updatedPersons);\r\n        //Modifica a mensagem de notificação e faz ela sumir depois de 5 sec\r\n        setNotificationMessage(\r\n          `${removedPerson.name} was removed from the phonebook`\r\n        );\r\n        setTimeout(() => {\r\n          setNotificationMessage(null);\r\n        }, 5000);\r\n      })\r\n      .catch((error) => {\r\n        //Modifica a mensagem de erro e faz ela sumir depois de 5 sec\r\n        setErrorMessage(\r\n          `${removedPerson.name} was already removed from the phonebook`\r\n        );\r\n        setTimeout(() => {\r\n          setErrorMessage(null);\r\n        }, 5000);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Phonebook</h1>\r\n      <Notification message={notificationMessage} />\r\n      <Notification message={errorMessage} type={\"error\"} />\r\n      <Filter searchTerm={searchTerm} handleSearch={handleSearch} />\r\n      <PersonForm\r\n        addPerson={addPerson}\r\n        newPerson={newPerson}\r\n        handlePersonChange={handlePersonChange}\r\n      />\r\n      <ContactList personsToShow={personsToShow} removePerson={removePerson} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}